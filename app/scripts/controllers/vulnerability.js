'use strict';

angular.module('quitoClimateStudyApp')
  .controller('VulnerabilityCtrl', ['$scope', '$routeParams', '$http', 'Vulnerabilidad', 'leafletData', function ($scope, $routeParams, $http, Vulnerabilidad, leafletData) {
  	angular.extend($scope, {
  		center: {
  			//useful defaults for quito, ecuador
  			lat: -0.271,
  			lng: -78.532,
  			zoom: 8
  		}
  	});

  	//get routing parameters for use with vulnerability service
  	$scope.vulnerabilityName = $routeParams.vulnerability.split('&')[0];
  	$scope.questionName = $routeParams.vulnerability.split('&')[1];

  	//default active layers for a vulnerability and question are static and set in the
  	//vulnerability service data source
  	$scope.question = Vulnerabilidad.getQuestionByName($scope.vulnerabilityName, $scope.questionName)

  	//public functions
  	$scope.select = function(layer){  		
  		console.log(getSelectedLayers());
  	};

  	//private functions
  	var updateMapToSelectedLayers = function(selectedLayers) {
  		leafletData.getMap().then(function(map) {
  			_.each(_.filter(selectedLayers, function(lyr) {return lyr.type === 'vector'; }), function (lyr) {
  				$http.get(Vulnerabilidad.getPathOfVector(lyr.data)).success(function(result){
  					_.each(result, function(r) { // console.log(r); });
	  					L.geoJson(result, {
	  						style: function(feature){
	  							return {color: feature.properties['quito-color'] };
	  						}
	  					}).addTo(map);  				
	  				});
  				});
  			});  			
  		});
  	};

  	var getSelectedLayers = function(){  		
  		var selectedLayers = [];
  		_.each($scope.question.base, function(section) { 
  			selectedLayers.push(getSelectedLayersOfSection(section));
  		});
  		_.each($scope.question.exposures, function(section) { 
  			selectedLayers.push(getSelectedLayersOfSection(section));
  		});
  		_.each($scope.question.sensitivityAnalysis, function(section) { 
  			selectedLayers.push(getSelectedLayersOfSection(section));
  		});
  		_.each($scope.question.vulnerability2050, function(section) { 
  			selectedLayers.push(getSelectedLayersOfSection(section));
  		});
  		
  		return _.flatten(selectedLayers);
  	};

  	var getSelectedLayersOfSection = function(section){
  		return _.filter(section.layers, function(lyr) {
  			return lyr.isSelected === true;
  		});
  	};

  	//initialization
  	updateMapToSelectedLayers(getSelectedLayers());

  }]);
